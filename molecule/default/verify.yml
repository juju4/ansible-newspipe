---

- name: Verify
  hosts: newspipe_group
  gather_facts: true
  vars:
    newspipe_home: /var/lib/_newspipe
    config: "{{ newspipe_home }}/newspipe/instance/config.py"
    ports:
      # newspipe
      - { h: localhost, p: 5000 }
      # gunicorn?
      # - { h: 0.0.0.0, p: 6100 }
    url: http://localhost:5000
    is_container: false
  pre_tasks:
    - name: Debug | var ansible_virtualization_type
      ansible.builtin.debug:
        var: ansible_virtualization_type
    - name: Set fact is_container
      ansible.builtin.set_fact:
        is_container: true
      when: >
        (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "docker"
           or ansible_virtualization_type == "containerd"
           or ansible_virtualization_type == "container"
          )
        )
  tasks:
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto
    - name: Validate that needed packages are present
      ansible.builtin.assert:
        that: ansible_facts.packages['git']

    - name: Check config file
      ansible.builtin.stat:
        path: "{{ config }}"
      register: cfg1
    - name: Validate configuration file is present
      ansible.builtin.assert:
        that: cfg1.stat.exists and cfg1.stat.size != 0

    - name: Ensure newspipe processes are running
      ansible.builtin.command: pgrep -u _newspipe python
      register: ps3
      changed_when: false
      failed_when: false
    - name: Validate ps output
      ansible.builtin.assert:
        that: ps3.stdout
      when:
        - not is_container|bool

    - name: Check all processes
      ansible.builtin.command: ps aux
      changed_when: false
      register: psa
    - name: Debug | ps aux output
      ansible.builtin.debug:
        var: psa
        verbosity: 1

    - name: Check poetry packages
      ansible.builtin.command:
        cmd: /usr/local/share/poetry/bin/poetry install --dry-run --sync --no-ansi
      args:
        chdir: "/var/lib/_newspipe"
      changed_when: false
      register: poetrylist
    - name: Ensure some dependencies are present in poetry
      ansible.builtin.assert:
        that:
          - "'feedparser' in poetrylist.stdout"
          - "'flask' in poetrylist.stdout"

    - name: Ensure ports are listening
      ansible.builtin.wait_for:
        host: "{{ item.h }}"
        port: "{{ item.p }}"
        timeout: 10
      with_items: "{{ ports }}"
      when:
        - not is_container|bool

    - name: Fetch localhost endpoint
      ansible.builtin.uri:
        url: "{{ url }}"
        validate_certs: no
        return_content: yes
      register: web
      failed_when: false
    - name: Validate localhost endpoint
      ansible.builtin.assert:
        that: >
          "'newspipe' in web.content"
      when:
        - not is_container|bool
